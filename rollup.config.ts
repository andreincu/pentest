import commonjs from '@rollup/plugin-commonjs';
import json from '@rollup/plugin-json';
import resolve from '@rollup/plugin-node-resolve';
import terser from '@rollup/plugin-terser';
import typescript from '@rollup/plugin-typescript';
import { defineConfig, type RollupOptions } from 'rollup';
import copy from 'rollup-plugin-copy';
import del from 'rollup-plugin-delete';
import scss from 'rollup-plugin-scss';
import svelte from 'rollup-plugin-svelte';
import svg from 'rollup-plugin-svg-import';
import { sveltePreprocess } from 'svelte-preprocess';

// @ts-ignore
import html from 'rollup-plugin-bundle-html-plus';

const PRODUCTION = !process.env.ROLLUP_WATCH;
const PATH_BACK = './src/back';
const PATH_FRONT = './src/front';
const PATH_OUTPUT = './public';

const sharedPlugins = () => {
  return [
    commonjs(),
    json(),
    typescript(),
    resolve(),
    PRODUCTION &&
      terser({
        maxWorkers: 8,
        compress: {
          unsafe_arrows: true,
          drop_debugger: true,
        },
      }),
  ];
};

//
const configBack = (): RollupOptions => {
  return {
    input: `${PATH_BACK}/index.ts`,
    output: {
      file: `${PATH_OUTPUT}/back/index.js`,
      format: 'es',
      sourcemap: 'inline',
    },
    watch: {
      clearScreen: false,
      exclude: ['node_modules/**', `${PATH_OUTPUT}/**`],
      include: [`${PATH_BACK}/**`],
    },
    plugins: [
      del({ targets: `${PATH_OUTPUT}/*`, runOnce: true }),
      copy({
        targets: [
          {
            src: './src/manifest.json',
            dest: `${PATH_OUTPUT}/`,
          },
          {
            src: './src/icon.svg',
            dest: `${PATH_OUTPUT}/`,
          },
        ],
      }),
      ...sharedPlugins(),
    ],
  };
};

const configFront = (dirName = 'default'): RollupOptions => {
  return {
    input: `${PATH_FRONT}/routes/${dirName}/index.js`,
    output: {
      dir: `${PATH_OUTPUT}`,
      name: 'index',
      format: 'iife',
      sourcemap: 'inline',
    },
    watch: {
      exclude: ['node_modules/**', `${PATH_OUTPUT}/**`],
      include: [`${PATH_FRONT}/**`],
      skipWrite: false,
    },
    plugins: [
      svg({ stringify: true }),
      // buildExports({
      //   sourceDir: `${PATH_FRONT}/lib/icons/svg`,
      //   outputFile: `${PATH_FRONT}/lib/icons/index.ts`,
      // }),
      scss({
        exclude: [`${PATH_OUTPUT}/**/*`],
        fileName: 'index.css',
      }),

      svelte({
        preprocess: sveltePreprocess(),
        include: [`${PATH_FRONT}/**/*.svelte`],
      }),

      html({
        template: `${PATH_FRONT}/template.html`,
        dest: `${PATH_OUTPUT}/`,
        filename: 'index.html',
        inline: true,
        minifyCss: PRODUCTION,
        clean: PRODUCTION,
        exclude: `${PATH_OUTPUT}/back`,
      }),

      ...sharedPlugins(),
    ],
  };
};

const config = defineConfig([
  //
  configBack(),
  configFront(),
]);

export default config;
